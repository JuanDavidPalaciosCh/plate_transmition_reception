options:
  parameters:
    author: fabian
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: ModulacionPlaca
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 260.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 176.0]
    rotation: 0
    state: true
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1184, 384.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '-1'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 244.0]
    rotation: 0
    state: true
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: '15'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 180.0]
    rotation: 0
    state: true
- name: blocks_uchar_to_float_1
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 248.0]
    rotation: 0
    state: true
- name: blocks_uchar_to_float_1_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 184.0]
    rotation: 0
    state: true
- name: blocks_xor_xx_0
  id: blocks_xor_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 232.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import os, glob, cv2, numpy as np\nfrom gnuradio import gr\nimport\
      \ pmt\n\nclass img2bits(gr.basic_block):\n    \"\"\"\n    Transmite N im\xE1\
      genes secuencialmente; cada una se repite `repeats` veces.\n\n    Parameters\n\
      \    ----------\n    dir_path : str\n        Carpeta que contiene las im\xE1\
      genes auto*.jpeg.\n    repeats : int\n        N\xFAmero de veces que se enviar\xE1\
      \ cada imagen.\n    mode : {\"bits\", \"int\"}\n        Igual que en tu versi\xF3\
      n original.\n    \"\"\"\n\n    def __init__(self,\n                 dir_path=\"\
      /home/jpalaciosch/Documents/UNAL/Septimo semestre/Comunicaciones/Proyecto final/dataset/autos/\"\
      ,\n                 repeats=10,\n                 mode=\"bits\"):\n        self.mode\
      \    = mode.lower().strip()\n        self.repeats = int(repeats)\n\n       \
      \ # \u2500\u2500 Obtener lista de archivos \u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n        pattern = os.path.join(dir_path,\
      \ \"auto*.jp*g\")  # acepta .jpeg o .jpg\n        self.files = sorted(glob.glob(pattern))\n\
      \        if not self.files:\n            raise RuntimeError(f\"No se encontraron\
      \ im\xE1genes con patr\xF3n {pattern}\")\n\n        # \u2500\u2500 Se\xF1ales\
      \ de E/S \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \
      \       out_sig = [np.uint8] if self.mode == \"bits\" else None\n        gr.basic_block.__init__(self,\
      \ name=\"img2bits_seq\",\n                                in_sig=None, out_sig=out_sig)\n\
      \n        # \u2500\u2500 Cabecera fija \u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\n        self.header = np.array([1,1,1,0,1,0,1,0,1],\
      \ dtype=np.uint8)\n\n        # \u2500\u2500 Estado interno \u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n        self.file_idx   =\
      \ 0          # \xEDndice en self.files\n        self.repeat_left = self.repeats\n\
      \        self._load_payload()         # crea self.payload y self.packet_len\n\
      \n        if self.mode == \"int\":\n            self.message_port_register_out(pmt.intern(\"\
      out\"))\n\n    # -------------------------------------------------------------------\
      \ #\n    #  UTILIDADES                                                     \
      \    #\n    # -------------------------------------------------------------------\
      \ #\n    def _extract_bits(self, path):\n        \"\"\"\n        Recorta la\
      \ placa, binariza y devuelve un vector 0/1 de longitud fija.\n        (Mismo\
      \ m\xE9todo que ten\xEDas, sin cambios funcionales).\n        \"\"\"\n     \
      \   img = cv2.imread(path)\n        if img is None:\n            raise RuntimeError(f\"\
      Imagen no encontrada: {path}\")\n\n        hsv  = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n\
      \        mask = cv2.inRange(hsv, (20,100,100), (35,255,255))\n        mask =\
      \ cv2.morphologyEx(mask, cv2.MORPH_CLOSE,\n                                cv2.getStructuringElement(cv2.MORPH_RECT,\
      \ (5,5)))\n\n        cnts, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\
      \        plate, possible, area_max = None, None, 0\n        for c in cnts:\n\
      \            x,y,w,h = cv2.boundingRect(c)\n            r, area = w/float(h),\
      \ w*h\n            if 1.8 < r < 3.2 and w > 40:\n                plate = img[y:y+h,\
      \ x:x+w]; break\n            elif area > area_max and w > 60:\n            \
      \    possible, area_max = img[y:y+h, x:x+w], area\n        if plate is None\
      \ and possible is not None:\n            plate = possible\n            print(f\"\
      \u26A0\uFE0F  {os.path.basename(path)}: placa fuera de proporci\xF3n ideal\"\
      )\n\n        if plate is None:\n            raise RuntimeError(f\"No se detect\xF3\
      \ placa en {path}\")\n\n        plate = cv2.resize(plate, (50, 40))\n      \
      \  gray  = cv2.cvtColor(plate, cv2.COLOR_BGR2GRAY)\n        _, bn = cv2.threshold(gray,\
      \ 100, 255, cv2.THRESH_BINARY_INV)\n        return (bn == 0).flatten().astype(np.uint8)\n\
      \n    def _load_payload(self):\n        \"\"\"Carga bits de la imagen actual\
      \ y prepara self.payload / len.\"\"\"\n        actual_path   = self.files[self.file_idx]\n\
      \        img_bits      = self._extract_bits(actual_path)\n        self.payload\
      \  = np.concatenate((self.header, img_bits))\n        self.packet_len = len(self.payload)\n\
      \n    def _advance_image(self):\n        \"\"\"Pasa a la siguiente imagen y\
      \ resetea el contador de repeticiones.\"\"\"\n        self.file_idx += 1\n \
      \       if self.file_idx >= len(self.files):\n            self.file_idx = len(self.files)\
      \  # deja apuntando al final\n            return False                     #\
      \ ya no hay m\xE1s im\xE1genes\n        self.repeat_left = self.repeats\n  \
      \      self._load_payload()\n        return True\n\n    # -------------------------------------------------------------------\
      \ #\n    #  GNU RADIO                                                      \
      \    #\n    # -------------------------------------------------------------------\
      \ #\n    def general_work(self, in_items, out_items):\n        if self.mode\
      \ != \"bits\":\n            return 0\n\n        out = out_items[0]\n       \
      \ if len(out) < self.packet_len:\n            return 0  # b\xFAfer a\xFAn peque\xF1\
      o\n\n        # Copiar payload y etiquetar\n        out[:self.packet_len] = self.payload\n\
      \        self.add_item_tag(0, self.nitems_written(0),\n                    \
      \      pmt.intern(\"packet_len\"),\n                          pmt.from_long(self.packet_len))\n\
      \n        # Gestionar recuento / avance\n        self.repeat_left -= 1\n   \
      \     if self.repeat_left == 0:\n            if not self._advance_image(): \
      \  # sin m\xE1s im\xE1genes \u2192 detener\n                return -1      \
      \             # se\xF1al EOF a GNU\_Radio\n\n        return self.packet_len\n\
      \n    def start(self):\n        \"\"\"En modo 'int' publica cada paquete en\
      \ un puerto de mensajes.\"\"\"\n        if self.mode == \"int\":\n         \
      \   packed = np.packbits(self.payload)\n            value  = int.from_bytes(packed.tobytes(),\
      \ \"big\")\n            msg = pmt.cons(pmt.PMT_NIL,\n                      \
      \     pmt.from_uint64(value)\n                           if value.bit_length()\
      \ <= 64\n                           else pmt.init_u8vector(len(packed), packed))\n\
      \            self.message_port_pub(pmt.intern(\"out\"), msg)\n        return\
      \ super().start()\n\n"
    affinity: ''
    alias: ''
    comment: ''
    dir_path: '"/home/jpalaciosch/Documents/UNAL/Septimo semestre/Comunicaciones/Proyecto
      final/dataset/autos/"'
    maxoutbuf: '0'
    minoutbuf: '0'
    mode: '"bits"'
    repeats: '10'
  states:
    _io_cache: "('img2bits_seq', 'img2bits', [('dir_path', \"'/home/jpalaciosch/Documents/UNAL/Septimo\
      \ semestre/Comunicaciones/Proyecto final/dataset/autos/'\"), ('repeats', '10'),\
      \ ('mode', \"'bits'\")], [], [('0', 'byte', 1)], '\\nTransmite N im\xE1genes\
      \ secuencialmente; cada una se repite `repeats` veces.\\n\\nParameters\\n----------\\\
      ndir_path : str\\n    Carpeta que contiene las im\xE1genes auto*.jpeg.\\nrepeats\
      \ : int\\n    N\xFAmero de veces que se enviar\xE1 cada imagen.\\nmode : {\"\
      bits\", \"int\"}\\n    Igual que en tu versi\xF3n original.\\n', ['mode', 'repeats'])"
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 172.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: float
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 84.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_sink_0
  id: uhd_usrp_sink
  parameters:
    affinity: ''
    alias: ''
    ant0: '"TX/RX"'
    ant1: '"TX/RX"'
    ant10: '"TX/RX"'
    ant11: '"TX/RX"'
    ant12: '"TX/RX"'
    ant13: '"TX/RX"'
    ant14: '"TX/RX"'
    ant15: '"TX/RX"'
    ant16: '"TX/RX"'
    ant17: '"TX/RX"'
    ant18: '"TX/RX"'
    ant19: '"TX/RX"'
    ant2: '"TX/RX"'
    ant20: '"TX/RX"'
    ant21: '"TX/RX"'
    ant22: '"TX/RX"'
    ant23: '"TX/RX"'
    ant24: '"TX/RX"'
    ant25: '"TX/RX"'
    ant26: '"TX/RX"'
    ant27: '"TX/RX"'
    ant28: '"TX/RX"'
    ant29: '"TX/RX"'
    ant3: '"TX/RX"'
    ant30: '"TX/RX"'
    ant31: '"TX/RX"'
    ant4: '"TX/RX"'
    ant5: '"TX/RX"'
    ant6: '"TX/RX"'
    ant7: '"TX/RX"'
    ant8: '"TX/RX"'
    ant9: '"TX/RX"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: 433e6
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dev_addr: '""'
    dev_args: ''
    gain0: '30'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    len_tag_name: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1432, 348.0]
    rotation: 0
    state: enabled

connections:
- [analog_const_source_x_0, '0', blocks_xor_xx_0, '1']
- [blocks_add_xx_0, '0', blocks_float_to_complex_0, '0']
- [blocks_add_xx_0, '0', qtgui_sink_x_0, '0']
- [blocks_float_to_complex_0, '0', uhd_usrp_sink_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_add_xx_0, '1']
- [blocks_repeat_0, '0', blocks_uchar_to_float_1_0, '0']
- [blocks_repeat_0, '0', blocks_xor_xx_0, '0']
- [blocks_uchar_to_float_1, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_uchar_to_float_1_0, '0', blocks_add_xx_0, '0']
- [blocks_xor_xx_0, '0', blocks_uchar_to_float_1, '0']
- [epy_block_0, '0', blocks_repeat_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
